@page "/people/delete"
@using Microsoft.EntityFrameworkCore
@using DonaideV2.Experimental.Domain
@inject IDbContextFactory<DonaideV2.Experimental.Web.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Person</h2>
    <hr />
    @if (person is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@person.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@person.LastName</dd>
        </dl>
        <EditForm method="post" Model="person" OnValidSubmit="DeletePerson" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(person is null)">Delete</button> |
            <a href="/people">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Person? person;

    [SupplyParameterFromQuery]
    private int PersonId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        person = await context.Person.FirstOrDefaultAsync(m => m.PersonId == PersonId);

        if (person is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePerson()
    {
        using var context = DbFactory.CreateDbContext();
        context.Person.Remove(person!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/people");
    }
}
